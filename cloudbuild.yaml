steps:
  # INSTALL / CONFIGURE ########################################################
  # - id: '⚙️ Clean npm cache'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['cache', 'clean', '--force']
  - id: '🔑 Refresh Artifact Registry access token'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    # name: node:${_NODE_VERSION}
    entrypoint: npx
    args: ['google-artifactregistry-auth', '--repo-config=.npmrc']
  - id: '⚙️ Install dependencies'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['ci']
  # AUDIT ######################################################################
  - id: '🛡️ Audit dependencies'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['audit', '--audit-level=moderate']
  # BUILD ######################################################################
  - id: '🔧 Build libraries'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'build:libs']
  - id: '🔧 Build scripts'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'build:scripts']
  # TEST #######################################################################
  - id: '🔍 Test library checks'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/checks']
  # - id: '🔍 Test library cloud-scheduler-utils'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'test:ci', '-w=packages/cloud-scheduler-utils']
  # - id: '🔍 Test library firestore-utils'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'test:ci', '-w=packages/firestore-utils']
  - id: '🔍 Test library hapi-healthcheck-plugin'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/hapi-healthcheck-plugin']
  - id: '🔍 Test library hapi-ip-whitelist-plugin'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/hapi-ip-whitelist-plugin']
  # - id: '🔍 Test library notifications'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'test:ci', '-w=packages/notifications']
  - id: '🔍 Test library schemas'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/schemas']
  # - id: '🔍 Test library secret-manager-utils'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'test:ci', '-w=packages/secret-manager-utils']
  - id: '🔍 Test library sqlite-utils'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/sqlite-utils']
  - id: '🔍 Test library stripe-utils'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/stripe-utils']
  - id: '🔍 Test library telegram-text-messages'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/telegram-text-messages']
    secretEnv: ['TELEGRAM']
  - id: '🔍 Test library utils'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w=packages/utils']
    env:
      - 'BUILD_ID=$BUILD_ID'
      - 'LOCATION=$LOCATION'
      - 'PROJECT_ID=$PROJECT_ID'
      - 'PROJECT_NUMBER=$PROJECT_NUMBER'
  # RELEASE ####################################################################
  # - id: '🚀 Copy dotfiles to each package root'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'copy-dotfiles']
  # - id: '🚀 Release to Artifact Registry with multi-semantic-release'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'release']
  #   # The github token must allow to push to this GitHub repository and must not
  #   # have expired.
  #   secretEnv: ['GITHUB_TOKEN']

availableSecrets:
  secretManager:
  # - versionName: projects/${PROJECT_ID}/secrets/GITHUB_TOKEN/versions/latest
  #   env: 'GITHUB_TOKEN'
  - versionName: projects/${PROJECT_ID}/secrets/TELEGRAM/versions/latest
    env: 'TELEGRAM'

# user-defined substitutions and default values
# https://cloud.google.com/build/docs/configuring-builds/substitute-variable-values#using_user-defined_substitutions
substitutions:
  _NODE_VERSION: 17.9.0
options:
  dynamic_substitutions: true