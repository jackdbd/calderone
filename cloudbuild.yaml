steps:
  # INSTALL / CONFIGURE ########################################################
  - id: 'üîë Refresh Artifact Registry access token'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    # name: node:${_NODE_VERSION}
    entrypoint: npx
    args: ['google-artifactregistry-auth', '--repo-config=.npmrc']
  - id: '‚öôÔ∏è Install dependencies'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['ci']
  # AUDIT ######################################################################
  - id: 'üõ°Ô∏è Audit dependencies'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['audit', '--audit-level=moderate']
  # BUILD ######################################################################
  - id: 'üîß Build libraries'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'build:libs']
  # - id: 'üîß Build scripts'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'build:scripts']
  # - id: 'üîß Build application audit'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'build', '-w packages/audit']
  # TEST #######################################################################
  - id: 'üîç Test library checks'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w packages/checks']
  - id: 'üîç Test library cloud-scheduler-utils'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w packages/cloud-scheduler-utils']
    # SA_NOTIFIER: ${{ secrets.SA_NOTIFIER }}
  - id: 'üîç Test library hapi-healthcheck-plugin'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w packages/hapi-healthcheck-plugin']
  - id: 'üîç Test library hapi-ip-whitelist-plugin'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'test:ci', '-w packages/hapi-ip-whitelist-plugin']
  # - id: 'üîç Test library utils'
  #   name: 'docker.io/library/node:${_NODE_VERSION}'
  #   entrypoint: npm
  #   args: ['run', 'test:ci', '-w packages/utils']
  # RELEASE ####################################################################
  - id: 'Copy dotfiles to each package root'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'copy-dotfiles']
  - id: 'üöÄ Release to Artifact Registry with multi-semantic-release'
    name: 'docker.io/library/node:${_NODE_VERSION}'
    entrypoint: npm
    args: ['run', 'release']
    # The github token must allow to push to this GitHub repository and must not
    # have expired.
    secretEnv: ['GITHUB_TOKEN']

availableSecrets:
  secretManager:
  - versionName: projects/${PROJECT_ID}/secrets/GITHUB_TOKEN/versions/${_GITHUB_TOKEN_VERSION}
    env: 'GITHUB_TOKEN'

# user-defined substitutions and default values
# https://cloud.google.com/build/docs/configuring-builds/substitute-variable-values#using_user-defined_substitutions
substitutions:
  _GITHUB_TOKEN_VERSION: 'latest'
  _NODE_VERSION: 17.9.0
options:
  dynamic_substitutions: true