main:
  steps:
  - assign_project_variables:
      assign:
        # https://cloud.google.com/workflows/docs/reference/stdlib/sys/get_env
        - project_id: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
        - function_location: "europe-west3"
        - function_telegram: ${"https://" + function_location + "-" + project_id + ".cloudfunctions.net/" + "calderone-send-telegram-message"}

  # retrieve secrets from Secret Manager #######################################

  - retrieve_phantombuster_api_key:
      call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
      args:
        project_id: ${project_id}
        secret_id: PHANTOMBUSTER_API_KEY
        version: "1"
      result: phantombuster_api_key
  

  - retrieve_reddit_secret:
      call: googleapis.secretmanager.v1.projects.secrets.versions.accessString
      args:
        project_id: ${project_id}
        secret_id: REDDIT_OAUTH_SECRET
        version: "1"
      result: reddit_oauth_secret
  
  # variable assignments #######################################################

  - assign_phantombuster_variables:
      assign:
        # PhantomBuster requires the agent ID to be a string
        - agent_id_linkedin_search_jobs: "782867216009454"
        - agent_id_linkedin_search_people: "8010883244687807"

  - assign_output_variables:
      assign:
        - message_title: ${"<b>" + "Lead generation (Hacker News)" + "</b>"}
        - telegram_text_hacker_news: ${message_title + "\n"}
        - telegram_text_linkedin_jobs: ${"<b>" + "Lead generation (Linkedin - Jobs)" + "</b>" + "\n"}
        - telegram_text_linkedin_people: ${"<b>" + "Lead generation (Linkedin - People)" + "</b>" + "\n"}
        - telegram_text_reddit_clojure: ${"<b>" + "Lead generation (Reddit - Clojure)" + "</b>" + "\n"}
        - telegram_text_reddit_react: ${"<b>" + "Lead generation (Reddit - React)" + "</b>" + "\n"}

  - assign_dates_and_timestamps:
      assign:
        # https://cloud.google.com/workflows/docs/reference/stdlib/sys/now
        - ts_now_utc: ${sys.now()}
        - seconds_in_30_days: 2592000
        - ts_start_utc_string: "${string(ts_now_utc - seconds_in_30_days)}"
        # - seconds_in_90_days: 7776000
        # - ts_start_utc_string: "${string(ts_now_utc - seconds_in_90_days)}"
        # - ts_start_utc_string: "${string(ts_now_utc)}"
        # https://cloud.google.com/workflows/docs/reference/stdlib/text/split
        - splits: ${text.split(ts_start_utc_string, ".")}
        - ts_start_utc: "${splits[0]}"
        # https://cloud.google.com/workflows/docs/reference/stdlib/time/format
        - formatted_timestamp: ${time.format(sys.now(), "UTC")}
        - date_splits: ${text.split(formatted_timestamp, "-")}
        - year: "${date_splits[0]}"
        # - month_digits: "${date_splits[1]}"

  - get_month:
      call: get_textual_month
      args:
        month_digits: "${date_splits[1]}"
      result: month

  # Hacker News ################################################################

  - append_link_freelancers_and_gigs:
      assign:
        - href_gigs: ${"https://hnhiring.com/freelancer/" + month + "-" + year}
        - anchor_tag_gigs: ${"<a href=" + "'" + href_gigs + "'" + ">" + "Freelancers and Gigs" + " (" + month + " " + year + ")" + "</a>"}
        - telegram_text_hacker_news: ${telegram_text_hacker_news + "\n" + anchor_tag_gigs}

  - append_links_technologies_jobs:
      # https://cloud.google.com/workflows/docs/reference/syntax/iteration
      for:
        value: tech
        in: [clojure,node,wasm]
        steps:
          - append_link_technologies_jobs:
              assign:
                - href_tech: ${"https://hnhiring.com/technologies/" + tech}
                - anchor_tag_tech: ${"<a href=" + "'" + href_tech + "'" + ">" + tech + " jobs" + " (" + month + " " + year + ")" + "</a>"}
                - telegram_text_hacker_news: ${telegram_text_hacker_news + "\n" + anchor_tag_tech}

  - links_hacker_news_who_is_hiring:
      call: hacker_news_algolia_api
      args:
        query: "Ask HN: Who is hiring?"
        tags: "author_whoishiring,(ask_hn,show_hn)"
        numeric_filters: ${text.replace_all("points>3,created_at_i>CREATED_AT", "CREATED_AT", ts_start_utc)}
      result: hn_who_is_hiring_anchor_tags

  - loop_hacker_news_who_is_hiring:
      for:
        value: link
        in: ${hn_who_is_hiring_anchor_tags}
        steps:
          - append_link_hn_who_is_hiring:
              assign:
                - telegram_text_hacker_news: ${telegram_text_hacker_news + "\n" + link}

  - links_hacker_news_seeking_freelancer:
      call: hacker_news_algolia_api
      args:
        query: "Ask HN: Freelancer? Seeking freelancer?"
        tags: "author_whoishiring"
        numeric_filters: ${text.replace_all("points>3,created_at_i>CREATED_AT", "CREATED_AT", ts_start_utc)}
      result: hn_seeking_freelancer_anchor_tags

  - loop_hacker_news_seeking_freelancer:
      for:
        value: link
        in: ${hn_seeking_freelancer_anchor_tags}
        steps:
          - append_link_hn_seeking_freelancer:
              assign:
                - telegram_text_hacker_news: ${telegram_text_hacker_news + "\n" + link}

  - links_hacker_news_clojure:
      call: hacker_news_algolia_api
      args:
        query: "clojure"
        tags: "(ask_hn,show_hn)"
        numeric_filters: ${text.replace_all("points>3,created_at_i>CREATED_AT", "CREATED_AT", ts_start_utc)}
      result: hn_clojure_anchor_tags

  - loop_hacker_news_clojure:
      for:
        value: link
        in: ${hn_clojure_anchor_tags}
        steps:
          - append_link_hn_clojure:
              assign:
                - telegram_text_hacker_news: ${telegram_text_hacker_news + "\n" + link}

  - links_hacker_news_authors:
      call: hacker_news_algolia_api
      args:
        query: ""
        tags: "(author_borkdude,author_feross,author_fogus,author_jrockway,author_patio11)"
        numeric_filters: ${text.replace_all("points>3,created_at_i>CREATED_AT", "CREATED_AT", ts_start_utc)}
      result: hn_authors_anchor_tags
  
  - loop_hacker_news_authors:
      for:
        value: link
        in: ${hn_authors_anchor_tags}
        steps:
          - append_link_hn_authors:
              assign:
                - telegram_text_hacker_news: ${telegram_text_hacker_news + "\n" + link}

  - send_telegram_message_hacker_news:
      call: http.post
      args:
        url: ${function_telegram}
        auth:
          type: OIDC
        body:
          text: ${telegram_text_hacker_news}
      result: message_result_hacker_news

  # Reddit #####################################################################

  - get_reddit_links_clojure:
      call: search_reddit
      args:
        q: '(title:"[hiring]" OR flair:Hiring) AND (subreddit:forhire OR subreddit:freelance OR subreddit:jobbit OR subreddit:jobopenings OR subreddit:remotejs) AND (selftext:"remote") AND (selftext:"clojure")'
        t: "month"
        oauth_secret: "${reddit_oauth_secret}"
      result: reddit_links_clojure

  - loop_reddit_links_clojure:
      for:
        value: link
        in: ${reddit_links_clojure}
        steps:
          - append_reddit_link_clojure:
              assign:
                - telegram_text_reddit_clojure: ${telegram_text_reddit_clojure + "\n" + link}

  - get_reddit_links_react:
      call: search_reddit
      args:
        q: '(title:"[hiring]" OR flair:Hiring) AND (subreddit:forhire OR subreddit:freelance OR subreddit:jobbit OR subreddit:jobopenings OR subreddit:remotejs) AND (selftext:"remote") AND (selftext:"react")'
        t: "week"
        oauth_secret: "${reddit_oauth_secret}"
      result: reddit_links_react
    
  - loop_reddit_links_react:
      for:
        value: link
        in: ${reddit_links_react}
        steps:
          - append_reddit_link_react:
              assign:
                - telegram_text_reddit_react: ${telegram_text_reddit_react + "\n" + link}

  - send_telegram_message_reddit_clojure:
      call: http.post
      args:
        url: ${function_telegram}
        auth:
          type: OIDC
        body:
          text: ${telegram_text_reddit_clojure}
      result: message_result_reddit_clojure

  - send_telegram_message_reddit_react:
      call: http.post
      args:
        url: ${function_telegram}
        auth:
          type: OIDC
        body:
          text: ${telegram_text_reddit_react}
      result: message_result_reddit_react

  # PhantomBuster ##############################################################

  - launch_phantombuster_agent_linkedin_search_jobs:
      call: launch_phantombuster_agent
      args:
        agent_id: "${agent_id_linkedin_search_jobs}"
        api_key: "${phantombuster_api_key}"
      result: phantombuster_linkedin_search_jobs_response

  - send_telegram_message_linkedin_jobs:
      call: http.post
      args:
        url: ${function_telegram}
        auth:
          type: OIDC
        body:
          text: ${telegram_text_linkedin_jobs}
      result: message_result_linkedin_jobs

  - launch_phantombuster_agent_linkedin_search_people:
      call: launch_phantombuster_agent
      args:
        agent_id: "${agent_id_linkedin_search_people}"
        api_key: "${phantombuster_api_key}"
      result: phantombuster_linkedin_search_people_response

  - send_telegram_message_linkedin_people:
      call: http.post
      args:
        url: ${function_telegram}
        auth:
          type: OIDC
        body:
          text: ${telegram_text_linkedin_people}
      result: message_result_linkedin_people

  # - prepare_return_value:
  #     assign:
  #       - indent: {"indent": "  ", "prefix": ""}
  #       - text_results: ${json.encode_to_string(results, indent)}

  - return_value:
      return: {
        "phantombuster_linkedin_search_jobs_response": "${phantombuster_linkedin_search_jobs_response}",
        "phantombuster_linkedin_search_people_response": "${phantombuster_linkedin_search_people_response}",
        "telegram": {
          "hacker_news_message": "${message_result_hacker_news.body}",
          "linkedin_jobs": "${message_result_linkedin_jobs.body}",
          "linkedin_people": "${message_result_linkedin_people.body}",
          "reddit_clojure": "${message_result_reddit_clojure.body}",
          "reddit_react": "${message_result_reddit_react.body}"
        }
      }

# Subworkflows #################################################################

### Utilities ##################################################################
get_textual_month:
  params: [month_digits]
  steps:
    # GCP Workflows allows a max of 10 switch conditions in a single step. So we
    # need this simple workaround to assign the month.
    - return_month_01-10:
        switch:
          - condition: ${month_digits == "01"}
            return: "january"
          - condition: ${month_digits == "02"}
            return: "february"
          - condition: ${month_digits == "03"}
            return: "march"
          - condition: ${month_digits == "04"}
            return: "april"
          - condition: ${month_digits == "05"}
            return: "may"
          - condition: ${month_digits == "06"}
            return: "june"
          - condition: ${month_digits == "07"}
            return: "july"
          - condition: ${month_digits == "08"}
            return: "august"
          - condition: ${month_digits == "09"}
            return: "september"
          - condition: ${month_digits == "10"}
            return: "october"
    - return_month_11-12:
        switch:
          - condition: ${month_digits == "11"}
            return: "november"
          - condition: ${month_digits == "12"}
            return: "december"

# Hacker News ##################################################################
# https://hn.algolia.com/api/v1/search_by_date?query="Ask HN: Freelancer? Seeking freelancer?"&tags=author_whoishiring&numericFilters=points>3,created_at_i>1646874000
# https://www.kmjn.org/notes/hacker_news_posters.html
hacker_news_algolia_api:
  params: [query, tags, numeric_filters]
  steps:
    - assign_variables:
        assign:
        - anchor_tags: []
    - search_hacker_news_api:
        call: http.get
        args:
          url: https://hn.algolia.com/api/v1/search_by_date
          timeout: 30.0
          query: {
            query: "${query}",
            # Tags are ANDed by default, can be ORed if between parenthesis.
            # The author whose username is "whoishiring" is a HackerNews bot that
            # posts once a month. "Ask HN: Who is hiring? (<month> <year>)"
            tags: "${tags}",
            numericFilters: "${numeric_filters}"
          }
        result: hn_api_response
    - loop_api_results:
        for:
          value: hit
          in: ${hn_api_response.body.hits}
          steps:
            - assign_defaults:
                assign:
                  - title: "missing title"
            - assign_title:
                switch:
                  - condition: ${hit.title != null}
                    assign:
                      - title: ${hit.title}
                  - condition: ${hit.story_title != null}
                    assign:
                      - title: ${hit.story_title}
            - assign_datum:
                assign:
                  - href: ${"https://news.ycombinator.com/item?id=" + hit.objectID}
                  - anchor_tag: ${"<a href=" + "'" + href + "'" + ">" + title + "</a>"}
                  - datum: {
                    "anchor_tag": "${anchor_tag}",
                    "author": "${hit.author}",
                    "href": "${href}",
                    "num_comments": "${hit.num_comments}",
                    "title": "${title}"
                  }
            # - log_datum:
            #     call: sys.log
            #     args:
            #       data: ${datum}
            #       severity: "DEBUG"
            - concat_anchor_tags:
                assign:
                # https://cloud.google.com/workflows/docs/reference/stdlib/list/concat
                - anchor_tags: ${list.concat(anchor_tags, anchor_tag)}
    - return_anchor_tags:
        return: ${anchor_tags}

# PhantomBuster ################################################################
# Try launching a PhantomBuster agent.
# Launching an agent can fail with a HTTP 402 (Payment Required) because I might
# have exceeded the time slots for my PhantomBuster account.
# https://cloud.google.com/workflows/docs/http-requests#http-errors
launch_phantombuster_agent:
  params: [agent_id, api_key]
  steps:
    # - log_args:
    #     call: sys.log
    #     args:
    #       data: {"agent_id": "${agent_id}", "api_key": "${api_key}"}
    #       severity: "WARNING"
    - try_launching_phantombuster_agent_or_return_error_message:
        try:
          call: http.post
          args:
            url: https://api.phantombuster.com/api/v2/agents/launch
            timeout: 300.0
            headers: {
              "X-Phantombuster-Key-1": "${api_key}",
              "Content-Type": "application/json"
            }
            body: {
              id: "${agent_id}"
            }
          result: phantombuster_agent_response
        except:
          as: err
          steps:
            - known_errors:
                switch:
                  - condition: ${err.code == 402}
                    next: no_daily_execution_time_remaining
            - unhandled_exception:
                raise: ${err}
      
    - no_daily_execution_time_remaining:
        return: {
          "message": '${"cannot launch PhantomBuster agent " + agent_id + ". No daily execution time remaining."}'
        }

# Reddit #######################################################################
# search job posts in the following subreddits:
# https://www.reddit.com/r/forhire/
# https://www.reddit.com/r/freelance/
# https://www.reddit.com/r/jobbit/
# https://www.reddit.com/r/jobopenings/
# https://www.reddit.com/r/remotejs/
search_reddit:
  params: [q, t, oauth_secret]
  steps:
    - search_in_reddit_forhire:
        call: http.get
        args:
          url: https://oauth.reddit.com/search
          timeout: 10.0
          headers:
            Authorization: ${"Bearer " + oauth_secret}
          query: {
            limit: 20,
            q: "${q}",
            # restrict_sr: true,
            sort: "new",
            t: "${t}"
          }
        result: reddit_forhire_response

    - assign_variables:
        assign:
        - anchor_tags: []
        - children: ${reddit_forhire_response.body.data.children}

    - loop_reddit_results:
        for:
          value: child
          in: ${reddit_forhire_response.body.data.children}
          steps:
            - assign_datum:
                assign:
                  - author: ${child.data.author}
                  - title: ${child.data.title}
                  - href: ${child.data.url}
                  - anchor_tag: ${"<a href=" + "'" + href + "'" + ">" + title + "</a>"}
            - concat_anchor_tags:
                assign:
                - anchor_tags: ${list.concat(anchor_tags, anchor_tag)}

    - return_anchor_tags:
        return: ${anchor_tags}
